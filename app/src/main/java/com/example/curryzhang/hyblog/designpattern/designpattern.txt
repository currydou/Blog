
设计模式的六大原则：
1.开闭原则
        开闭原则就是说对扩展开放，对修改关闭。在程序需要进行扩展的时候，不能去修改该原有的代码，实现一个热拔插的效果。
    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类。
2.里氏代换原则
         里氏替换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。
    LSP是继承服用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，
    而衍生类也能够在基类的基础上增加新的行为。里氏替换原则是对”开-闭“原则的补充。
    实现”开-闭“原则的关键步骤是抽象化的具体实现，所以里氏替换原则是对实现抽象化的具体步骤的规范
3.依赖倒转原则
           这个是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。
4.接口隔离原则
            这个原则的意思是：使用多个隔离的接口，比使用单个接口更好。还有一个降低类之间的耦合度的意思，
     从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。
     所以上文中多次出现：降低依赖，降低耦合。
5.迪米特法则(最少知道原则)
            为什么叫最少知道原则,就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相互对立。
6.合成服用原则
            原则是尽量使用合成/聚合的方式，而不是使用继承。

Java的23种设计模式：
1.工厂方法模式
2.抽象工厂模式
3.单例模式
4.建造者模式
5.原型模式
6.适配器模式
7.装饰模式
8.代理模式
9.外观模式
10.桥接模式
11.组合模式
12.享元模式
13.策略模式
14.模板方法模式
15.观察者模式
16.迭代子模式
17.责任链模式
18.命令模式
19.备忘录模式
20.状态模式
21.访问者模式
22.中介者模式
23.解释器模式